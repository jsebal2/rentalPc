generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model inquiry {
  inquiry_id Int             @id @default(autoincrement())
  user_id    Int
  title      String          @db.VarChar(100)
  content    String          @db.Text
  file_path  String?         @db.VarChar(255)
  status     inquiry_status?
  created_at DateTime?       @default(now()) @db.DateTime(0)
  user       user            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "inquiry_ibfk_1")

  @@index([user_id], map: "user_id")
}

model notice {
  notice_id  Int         @id @default(autoincrement())
  admin_id   Int
  title      String      @db.VarChar(100)
  content    String      @db.Text
  type       notice_type
  file_path  String?     @db.VarChar(255)
  pinned     Boolean?    @default(false)
  created_at DateTime?   @default(now()) @db.DateTime(0)
  user       user        @relation(fields: [admin_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "notice_ibfk_1")

  @@index([admin_id], map: "admin_id")
}

model payment {
  payment_id Int             @id @default(autoincrement())
  user_id    Int
  rental_id  Int
  amount     Int
  method     payment_method?
  status     payment_status?
  paid_at    DateTime?       @db.DateTime(0)
  user       user            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "payment_ibfk_1")
  rental     rental          @relation(fields: [rental_id], references: [rental_id], onDelete: NoAction, onUpdate: NoAction, map: "payment_ibfk_2")

  @@index([rental_id], map: "rental_id")
  @@index([user_id], map: "user_id")
}

model pc {
  pc_id        Int              @id @default(autoincrement())
  cpu          String?          @db.VarChar(50)
  ram          String?          @db.VarChar(50)
  graphic      String?          @db.VarChar(50)
  state        pc_state?
  power_status pc_power_status?
  user_id      Int?
  price        Int?
  reg_date     DateTime?        @default(now()) @db.DateTime(0)
  user         user?            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "pc_ibfk_1")
  rental       rental[]

  @@index([user_id], map: "user_id")
}

model rental {
  rental_id  Int            @id @default(autoincrement())
  user_id    Int
  pc_id      Int
  start_date DateTime?      @db.Date
  end_date   DateTime?      @db.Date
  auto_renew Boolean?
  status     rental_status?
  payment    payment[]
  user       user           @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "rental_ibfk_1")
  pc         pc             @relation(fields: [pc_id], references: [pc_id], onDelete: NoAction, onUpdate: NoAction, map: "rental_ibfk_2")

  @@index([pc_id], map: "pc_id")
  @@index([user_id], map: "user_id")
}

model user {
  user_id            Int         @id @default(autoincrement())
  name               String      @db.VarChar(100)
  email              String      @unique(map: "email") @db.VarChar(100)
  password           String      @db.VarChar(255)
  phone              String?     @db.VarChar(20)
  role               user_role   @default(USER)
  status             user_status
  two_factor_enabled Boolean?    @default(false)
  join_date          DateTime?   @default(now()) @db.DateTime(0)
  last_login         DateTime?   @db.DateTime(0)
  inquiry            inquiry[]
  notice             notice[]
  payment            payment[]
  pc                 pc[]
  rental             rental[]
}

enum notice_type {
  GENERAL
  MAINTENANCE
  UPDATE
}

enum payment_method {
  CARD
  BANK_TRANSFER
  PAYPAL
}

enum pc_state {
  AVAILABLE
  IN_USE
  MAINTENANCE
}

enum inquiry_status {
  PENDING
  ANSWERED
  CLOSED
}

enum payment_status {
  PENDING
  PAID
  FAILED
}

enum pc_power_status {
  ON
  OFF
}

enum user_role {
  USER
  ADMIN
}

enum rental_status {
  ACTIVE
  ENDED
  CANCELLED
}

enum user_status {
  ACTIVE
  INACTIVE
  BANNED
}
